/******************************************************************************************************************************
Apex Class Name  : SecAPIReleaseScanController
Version          : 1.0 
Created Date     : 14/04/2021
Function         : 

Modification Log :
* Developer                       Date                 Description
* -----------------------------------------------------------------------------------------------------------------------------------------------------------------------                
* Vaibhav Tripathi               04/03/2021          This controller call from Aura component and used to do SEC api 3 different sequential callouts for checkmarx scan.
* Krishna Prasad                  07/20/2022          Retrieve Scorecard from secapi and pass to GLAPI call out
* Krishna Prasad                  08/07/2022          Retrieve Scorecard after secapi call out completed
* Krishna Prasad                  06/26/2023          Adding New Headers along with SECAPI 2.0 Upgrades
***************************************************************************************************************************************************************************/
public with sharing class SecAPIReleaseScanController {
    
    /*
*Post - https://humana-sparq-appsecapi-gateway-east2-qa.azurewebsites.net/api/v2/sast/scan/report/pdf/85195574-6df5-4222-8aa1-9f4d98fa0a0f/a6a39654-92f8-46aa-bb40-0ddfbfbbafa6 
* request - {"repoBranchToScan": "refs/heads/feature/US-0014996","incremental": True,"force": false}
* response - {"statusUrl": "https://humana-sparq-appsecapi-gateway-east2-qa.azurewebsites.net/api/v2/sast/scan/status/8e023c69-a465-4eb8-9ced-e34a963f0482/6148bb47-402e-4058-a2e2-0cedc74f05c1"} 

*/   
    
    /*
        Method Name  : getReleaseDetails        
        Function     : Returns release record details for the input release records 
    */
    @AuraEnabled
    public Static copado__Release__c getReleaseDetails(String releaseId) {
        string cpuid = EncodingUtil.urlEncode(releaseId, 'UTF-8');
        if(releaseId != null && Schema.sObjectType.copado__Release__c.isAccessible()){
            copado__Release__c lstReleaseRecords = new copado__Release__c();
            lstReleaseRecords = [SELECT Id,Name,OwnerId,SecAPI_Scan_Id__c,SCA_Scan_Id__c, Current_APPSVCID__c,Owner.Name,SCA_Scan_Status__c,SCA_Scan_Passed__c,SEC_API_Scan_Status__c, Current_Glapi_Status__c,SecAPI_Scan_Passed__c,Locked__c,Overall_Security_Scan_Status__c,SecApiScanProjectCounter__c FROM copado__Release__c WHERE Id = :cpuid AND OwnerId != null WITH SECURITY_ENFORCED LIMIT 1];
            return lstReleaseRecords;
        }
        else 
        throw new AuraHandledException('Users do not have appropriate access');
        
        
    }
    /*@AuraEnabled
    public Static copado__Release__c getReleaseDetails(String releaseId) {
        try{
            string appReqId = EncodingUtil.urlEncode(releaseId, 'UTF-8');
            System.debug('Vaibhav getreleasedetails debug start');
            System.debug('Vaibahv relaseid= '+releaseId);
            System.debug('Vaibhav object type='+Schema.sObjectType.copado__Release__c.isAccessible());
            if(releaseId != null && Schema.sObjectType.copado__Release__c.isAccessible()){
                //TYD9504 change 
                //List<copado__Release__c> lstReleaseRecords = [SELECT Id,Name,OwnerId,SecAPI_Scan_Id__c,SCA_OSA_Scan_Id__c, Owner.Name,SCA_Scan_Status__c,SCA_Scan_Passed__c,SEC_API_Scan_Status__c,SCA_OSA_Scan_Status__c, Current_Glapi_Status__c,SecAPI_Scan_Passed__c,SCA_OSA_Scan_Passed__c,Locked__c FROM copado__Release__c WHERE Id = :appReqId AND OwnerId != null WITH SECURITY_ENFORCED LIMIT 1];
                //TYD9504 change end
                List<copado__Release__c> lstReleaseRecords = [SELECT Id,Name,OwnerId,SecAPI_Scan_Id__c,SCA_Scan_Id__c, Current_APPSVCID__c,Owner.Name,SCA_Scan_Status__c,SCA_Scan_Passed__c,SEC_API_Scan_Status__c, Current_Glapi_Status__c,SecAPI_Scan_Passed__c,Locked__c,Overall_Security_Scan_Status__c,SecApiScanProjectCounter__c FROM copado__Release__c WHERE Id = :appReqId AND OwnerId != null WITH SECURITY_ENFORCED LIMIT 1];
                 System.debug('Vaibahv lstReleaseRecords[0]= '+lstReleaseRecords[0]);
                if(!lstReleaseRecords.isEmpty()) {
                    return lstReleaseRecords[0];
                } else {
                    throw new AuraHandledException('Release record not found');
                }
            } else {
                throw new AuraHandledException('Users do not have appropriate access');
            }
        } catch (Exception e) {
            throw new AuraHandledException('Error in fetching release details:' + e.getMessage());
        }
        
    }*/

        
    /*
        Method Name  : resetSecAPIScan        
        Function     : Resets the default values offew fields of the  release record from the input  
    */
    
    @AuraEnabled
    public Static String resetSecAPIScan(String releaseId) {
        List<copado__Release__c> lstReleaseToUpdate = new List<copado__Release__c> ();
        if(releaseId != null && Schema.sObjectType.copado__Release__c.isUpdateable()){
            lstReleaseToUpdate.add(new copado__Release__c(Id=releaseId,SecurityGrade__c='',SecAPI_Scan_Passed__c=FALSE,SCA_Scan_Passed__c=FALSE,Current_Glapi_Status__c='--None--',SEC_API_Scan_Status__c='Not Started',SCA_Scan_Status__c='Not Started',CurrentScanCount__c=0));
                if(!lstReleaseToUpdate.isEmpty()){
                    
                    System.debug('*******************************-update 1');
                    update lstReleaseToUpdate;
                    
                }       
        }
        else{
        throw new AuraHandledException('Users do not have appropriate access to reset the scan');
        }
        return null;
    }
    
    /*
        Method Name  : getBuildId        
        Function     : Returns SAS build id of the  release record from the input based on the user access 
    */
    
    @AuraEnabled    
    public static String getBuildId(String releaseId){
          if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Build_Id__c.isAccessible()) {
            throw new AuraHandledException('User does not have access to Build_Id__c field.');
        }
        if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Repo_Branch__c.isCreateable()) {
            throw new AuraHandledException('User does not have access to create Repo_Branch__c field.');
        }
        List<SEC_API_Scan_Result__c> lstScanResults =  new List<SEC_API_Scan_Result__c>();
        List<copado__Release__c> toUpdateRelease = new List<copado__Release__c>();
        Set<Id> envIds = new Set<Id>();
        String buildId = '';
        String BranchName = '';
        
        try{
            if(!Schema.sObjectType.Copado__User_Story__c.isUpdateable() || !Schema.SObjectType.Copado__User_Story__c.isCreateable()){
                throw new addException('The user does not have object access permissions');
            }
            if(String.isNotEmpty(releaseId)){
                for(Copado__User_Story__c us :[Select Id,copado__Environment__c From Copado__User_Story__c Where copado__Release__c =:releaseId]){
                    if(String.isNotBlank(us.copado__Environment__c) && us.copado__Environment__c!= null ){
                        envIds.add(us.copado__Environment__c);
                    }
                }
            }
            if(!envIds.isEmpty()){
                BranchName = [SELECT Id, copado__branch__c, copado__Source_Environment__c FROM copado__Deployment_Flow_Step__c WHERE copado__Source_Environment__c IN: envIds Limit 1].copado__branch__c;
                System.debug('BranchName val = '+BranchName);
            }
            lstScanResults.add(new SEC_API_Scan_Result__c(Release_Copado__c = releaseId,RecordTypeId=Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId(),Repo_Branch__c=BranchName));
            if (!Schema.sObjectType.SEC_API_Scan_Result__c.isCreateable() ||
                !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Release_Copado__c.isCreateable() ||
                !Schema.sObjectType.SEC_API_Scan_Result__c.fields.RecordTypeId.isCreateable() ||
                !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Repo_Branch__c.isCreateable()) {
                    throw new AuraHandledException('User does not have appropriate access to create SEC_API_Scan_Result__c fields.');
                }
            if(!lstScanResults.isEmpty() && Schema.sObjectType.SEC_API_Scan_Result__c.isCreateable()){
                Insert lstScanResults;
            }
            if(Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Build_Id__c.isAccessible()){
                buildId = [Select Id,Build_Id__c From SEC_API_Scan_Result__c Where Build_Id__c != null AND Release_Copado__c =:releaseId Order by CreatedDate Desc limit 1].Build_Id__c;
            }
            if(Schema.sObjectType.copado__Release__c.isUpdateable() && String.isNotEmpty(buildId)){
                toUpdateRelease.add(new copado__Release__c(Id=releaseId,Artifact_Id__c = buildId));
                 System.debug('*******************************-update 2');
                Update toUpdateRelease;
            }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
        }
        return buildId;
    }
    
    
     /*
        Method Name  : getBuildIdSCA        
        Function     : Returns SCA build id of the  release record from the input based on the user access 
    */
    
    @AuraEnabled
    public static String getBuildIdSCA(String releaseId){
        List<SEC_API_Scan_Result__c> lstScanResults =  new List<SEC_API_Scan_Result__c>();
        List<copado__Release__c> toUpdateRelease = new List<copado__Release__c>();
        Set<Id> envIds = new Set<Id>();
        String buildId = '';
        String BranchName = '';
       
        try{
             if(!Schema.sObjectType.Copado__User_Story__c.isUpdateable() || !Schema.SObjectType.Copado__User_Story__c.isCreateable()){
             throw new addException('The user does not have object access permissions');
    }
  

            if(Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Build_Id__c.isAccessible()){
              buildId = [Select Id,Build_Id__c From SEC_API_Scan_Result__c Where Build_Id__c != null AND Release_Copado__c =:releaseId Order by CreatedDate Desc limit 1].Build_Id__c;
            }

        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
        }
       return buildId;
    }
    
    
    /*
        Method Name  : lockReleaseRec        
        Function     : Returns SCA build id of the  release record from the input based on the user access 
    */
    
    @AuraEnabled
    public static String lockReleaseRec(String releaseId){
        List<copado__Release__c> lstReleaseToUpdate = new List<copado__Release__c> ();
        if(releaseId != null && Schema.sObjectType.copado__Release__c.isUpdateable()){
            
            List<string> listOfProjectIDs = new List<string>();  
            List<Copado__User_Story__c> lstUserStory = new List<Copado__User_Story__c>();
            Map<string,string> uniqueAppserviceId = new Map<string,string>();
            Integer appcount = 0;
            String UniqueAppId = '';
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
            // lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.App_Id__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
               lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            }
            
            if(lstUserStory.size() > 0){
                for(Copado__User_Story__c cus : lstUserStory) {
                    uniqueAppserviceId.put(cus.Copado__Project__r.SNOW_APPSVCID__c,cus.id);
                   
                }
            }
            
            if(uniqueAppserviceId.size() > 0){
                appcount =  uniqueAppserviceId.size();
            }
            else{
               appcount = 0; 
            }
            
            for(String appId : uniqueAppserviceId.keyset()) {
                 UniqueAppId =UniqueAppId + appId +',';
            }    
            if(UniqueAppId != ''){
                 UniqueAppId = UniqueAppId.removeEnd(',');
            }
           
            //lstReleaseToUpdate.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SCA_Scan_Status__c='In-Progress',Current_Glapi_Status__c='Security Scan In Progress',Locked__c=true,SecApiScanProjectCounter__c = appcount));
            lstReleaseToUpdate.add(new copado__Release__c(Id=releaseId,Current_Glapi_Status__c='--None--',Locked__c=true,SecApiScanProjectCounter__c = appcount,Unique_Appservice_Id__c = UniqueAppId));
            
            
            if(!lstReleaseToUpdate.isEmpty()){
                 System.debug('*******************************-update 3');
                update lstReleaseToUpdate;
            }       
        }
        else{
            throw new AuraHandledException('Users do not have appropriate access to Lock the record');
        }
        return null;
    }
    //TYD9504 Changes end
    /*public static List<SEC_API_Scan_Result__c> getScanResultRecord(String releaseId){
        List<SEC_API_Scan_Result__c> secResList =  new  List<SEC_API_Scan_Result__c>();
        if(releaseId != null && Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Status__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.FailScan__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Critical__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.High__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Medium__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Low__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Type__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Req_Id__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_Url__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Json_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.pdf_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.xml_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Score_Card__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Last_Updated__c.isAccessible()){
            secResList = [select Id,Scan_Status__c,OSA_SCA_scan_Status__c,FailScan__c,SCA_OSA_Scan_Failed__c,Critical__c,Critical_SCA__c,High__c,High_SCA_OSA__c,Medium__c,Medium_OSA_SCA__c,Low__c,Low_OSA_SCA__c,Scan_Type__c,Req_Id__c,Status_Url__c,SCA_OSA_Status_URL__c,Json_Report__c,pdf_Report__c,xml_Report__c,Score_Card__c,Last_Updated__c from SEC_API_Scan_Result__c where Release_Copado__c =:releaseId order by createddate desc limit 1];
        }
        return secResList;
    }*/
    //TYD9504 Changes end
    public static List<SEC_API_Scan_Result__c> getScanResultRecord(String releaseId){
        List<SEC_API_Scan_Result__c> secResList =  new  List<SEC_API_Scan_Result__c>();
        if(releaseId != null && Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Status__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.SecApiGrade__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.FailScan__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Critical__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.High__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Medium__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Low__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Type__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Req_Id__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_Url__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Json_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.pdf_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.xml_Report__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Score_Card__c.isAccessible() && Schema.sObjectType.SEC_API_Scan_Result__c.fields.Last_Updated__c.isAccessible()){
            secResList = [select Id,Scan_Status__c,SCA_scan_Status__c,FailScan__c,SCA_Last_Updated__c,SCA_Scan_Failed__c,Critical__c,Critical_SCA__c,High__c,High_SCA__c,Medium__c,Medium_SCA__c,Low__c,Low_SCA__c,Scan_Type__c,Req_Id__c,Status_Url__c,SCA_Status_URL__c,Json_Report__c,pdf_Report__c,xml_Report__c,Score_Card__c,Last_Updated__c,SecApiGrade__c from SEC_API_Scan_Result__c where Release_Copado__c =:releaseId order by createddate desc limit 1];
          }
        return secResList;
    }
    @AuraEnabled
    public static String fetchScanStatus(String releaseId){
        String statusUrl = '';
        List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(releaseId);  
        if(!secResList.isEmpty()){
            statusUrl = secResList[0].Status_URL__c;
        }
        return statusUrl;
    }
    
    @AuraEnabled
    public static String fetchSCAScanStatus(String releaseId){
        String statusUrl = '';
        List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(releaseId);  
        if(!secResList.isEmpty()){
            statusUrl = secResList[0].SCA_Status_URL__c;//Need to check as of 1/14/2025
        }
        return statusUrl;
    }
    
    
    @AuraEnabled
    public static String secAPIScan(String releaseId) {
        
        if (!Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_URL__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Release_Copado__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Status__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.RecordTypeId.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.SecAPI_Scan_Id__c.isAccessible()) {
                throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
            }
        
        if (!Schema.sObjectType.copado__Release__c.isAccessible() || 
            !Schema.sObjectType.copado__Release__c.fields.SEC_API_Scan_Status__c.isAccessible()) {
                throw new AuraHandledException('User does not have appropriate access to copado__Release__c fields.');
            }
        String statusURL ='';
        String appReqId = '';
        String resp = '';
        String repoBranch = '';
        String initiatingSource = '';
        String mandatoryCol = '';
        String guId = '';
        String excludeFiles = '';
        String excludeFolders = '';
        String projectAppId ='';
        boolean forceFlag = true;
        Integer scanCounter = 0;
        Integer totalstartedcompleted;
        if (!Schema.sObjectType.copado__Release__c.isAccessible()) {
                throw new AuraHandledException('User does not have appropriate access to copado__Release__c fields.');
            }
        List<copado__Release__c> toUpdateRelease = new List<copado__Release__c>();
        List<copado__User_Story__c> lstUserStory = new List<copado__User_Story__c>();
        copado__Release__c lstRelease = new copado__Release__c();
        
        if (!Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() || !Schema.sObjectType.SEC_API_Scan_Result__c.isCreateable() || !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_URL__c.isCreateable()) {
            throw new AuraHandledException('User do not have appropriate access to create SEC_API_Scan_Result__c records.');
        }
        
        SEC_API_Scan_Result__c sr = new SEC_API_Scan_Result__c();
        List<string> listOfProjectIDs = new List<string>();
        
              
        try{
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
            // lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.App_Id__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
               lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            }
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.copado__Release__c.isAccessible()){
                lstRelease = [select Id,Name,Artifact_Id__c, SecApiScanProjectCounter__c,CurrentScanCount__c,Unique_Appservice_Id__c,Current_APPSVCID__c from copado__Release__c where Id =:releaseId limit 1];
            }
            
            // add all project to list
             for(copado__User_Story__c us : lstUserStory){
                listOfProjectIDs.add(us.Copado__Project__r.SNOW_APPSVCID__c);
            }
            
            String unqappid = lstRelease.Unique_Appservice_Id__c;
			List<String> lstunqappid = unqappid.split(',');
            system.debug('VXD3378 unqappid SECAPISCAN' + unqappid);
            system.debug(lstunqappid.size());
            system.debug('lstRelease Size :'+lstRelease.CurrentScanCount__c);
			system.debug(lstunqappid.size() == Integer.valueof(lstRelease.CurrentScanCount__c) ? lstunqappid[Integer.valueof(lstRelease.CurrentScanCount__c)-1] :lstunqappid[Integer.valueof(lstRelease.CurrentScanCount__c)]);
			system.debug(lstunqappid.size());
            
           // scanCounter  =  lstRelease[0].SecApiScanProjectCounter__c != null ?  lstRelease[0].SecApiScanProjectCounter__c.intValue() : 0;
            system.debug('Scancounter Value E3' + scanCounter);
            system.debug('@@@lstRelease[0].SecApiScanProjectCounter__c.intValue() : ' +scanCounter);
            // remove duplicates from list
            List<String> UniqueProjectIDs = new List<String>(new Set<String>(listOfProjectIDs));
            system.debug('@@@UniqueProjectIDs E3: ' + UniqueProjectIDs);
            // get current index of project
            //string currentIterationProjectID = UniqueProjectIDs[scanCounter];
            //string currentIterationProjectID = UniqueProjectIDs[0]; // kamal commented on Dec 22
            //string currentIterationProjectID = lstunqappid[Integer.valueof(lstRelease.CurrentScanCount__c)];
            string currentIterationProjectID = lstunqappid.size() == Integer.valueof(lstRelease.CurrentScanCount__c) ? lstunqappid[Integer.valueof(lstRelease.CurrentScanCount__c)-1] :lstunqappid[Integer.valueof(lstRelease.CurrentScanCount__c)];
            lstRelease.Current_APPSVCID__c=currentIterationProjectID;
            
            totalstartedcompleted = Integer.valueof(lstRelease.CurrentScanCount__c);
            
            
            
            // get project info
            copado__Project__c projectForSecApiCall;
            if(Schema.sObjectType.copado__Project__c.isAccessible()){
                projectForSecApiCall = [select App_Id__c, Exclude_Files__c, Exclude_Folders__c from copado__Project__c where SNOW_APPSVCID__c =:currentIterationProjectID limit 1];
                // populate info for project 
                projectAppId =projectForSecApiCall.App_Id__c;
                excludeFiles = projectForSecApiCall.Exclude_Files__c;
                excludeFolders = projectForSecApiCall.Exclude_Folders__c;  
            }
            if(Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible()){
                // get repo branch
                repoBranch = [Select Id,Repo_Branch__c From SEC_API_Scan_Result__c Where Release_Copado__c =: releaseId Order by CreatedDate Desc Limit 1].Repo_Branch__c;
            }
            //get data
            initiatingSource = [Select Id,Value__c From Glapi_Callout_Settings__c Where Name = 'SecAPIInitiatingSource' Limit 1].Value__c;
            mandatoryCol = [Select Id,Value__c From Glapi_Callout_Settings__c Where Name = 'SecAPIMandatoryCol' Limit 1].Value__c;
            guID =   [Select Id,Value__c From Glapi_Callout_Settings__c Where Name = 'TechGUID' Limit 1].Value__c;
            system.debug('repoBranch val = '+repoBranch);
            if(totalstartedcompleted > 0){
                forceFlag = false;
            }
            String reqBody = '{"repoBranchToScan": "refs/heads/'+repoBranch+'","incremental": true,"force":'+forceFlag+',"devOpsInfo": { "intiatingSource": "'+initiatingSource+'", "teamProjectName": "'+mandatoryCol+'", "teamProjectId": "'+guID+'", "buildInfo": { "buildId": "'+lstRelease.Artifact_Id__c+'", "buildName": "'+mandatoryCol+'", "buildDefinitionName": "'+mandatoryCol+'", "buildReason": "'+mandatoryCol+'", "buildRepositoryID": "'+mandatoryCol+'", "buildRepositoryName": "'+mandatoryCol+'", "buildSourceBranch": "refs/heads/'+repoBranch+'" }},"excludeFoldersPattern": "'+excludeFolders+'","excludeFilesPattern": "'+excludeFiles+'"}';
            system.debug('reqBody val = '+reqBody);
            HTTPResponse res = new HTTPResponse();
            String endURL = '/start/'+projectAppId;
            String recordId = [Select Id From SEC_API_Scan_Result__c Where Release_Copado__c =:ReleaseId Order by CreatedDate Desc limit 1].Id;
            res = getCalloutResponse(endURL,'POST',reqBody);
            system.debug('niharika 1 endurl' + endURL + 'and reqbody ..' + reqBody);
            system.debug('niharika sast getstatuscode' + res.getStatusCode());
            
            if(res != null && res.getStatusCode() == 202){
               
                // Parse JSON response to get the statusUrl field values.
                JSONParser parser = JSON.createParser(res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'statusUrl')) {
                            parser.nextToken();
                            // Get the value.
                            statusURL = parser.getText();
                        }
                }
                system.debug('Rama Status URL after while loop' + statusURL);
                Boolean SCARequired = getSCAvalue(releaseId,1);
                if(!String.isEmpty(statusUrl)){
                    appReqId = statusUrl.substringAfter('status/');
                    if(appReqId.length() > 0 && appReqId.contains('/')){
                        
                        if(SCARequired){
                            toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress', SecAPI_Scan_Id__c = appReqId.split('/')[1]));
                        }  
                        else{
                            toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress', SecAPI_Scan_Id__c = appReqId.split('/')[1],CurrentScanCount__c =  totalstartedcompleted+1));    
                        }
                      //toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress', SecAPI_Scan_Id__c = appReqId.split('/')[1],CurrentScanCount__c =  totalstartedcompleted+1));    
                      //  toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress', SecAPI_Scan_Id__c = appReqId.split('/')[1]));    
                   
                    }
                }else{
                    
                    if(SCARequired){
                        toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress'));
                     //   toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress')); 
                
                    }
                    else{
                        toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress',CurrentScanCount__c =  totalstartedcompleted+1));
                     //   toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress')); 
                
                    }
                      //toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress',CurrentScanCount__c =  totalstartedcompleted+1));
                     //   toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='In-Progress',SecurityGrade__c = '',SecAPI_Scan_Passed__c=false,Current_Glapi_Status__c='Security Scan In Progress')); 
                }
                system.debug('@@@ appReqId'+appReqId);
              /*  if (Schema.sObjectType.SEC_API_Scan_Result__c.fields.Id.isUpdateable()) {
                } else {
                    throw new AuraHandledException('User does not have permission to update SEC_API_Scan_Result__c Id field.');
                }*/
                 sr.Id = recordId;
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_URL__c.isUpdateable()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.Status_URL__c = appReqId;
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Release_Copado__c.isAccessible()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.Release_Copado__c = releaseId;
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Status__c.isAccessible()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.Scan_Status__c = 'Callout 1 Completed';
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.RecordTypeId.isAccessible()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.RecordTypeId = Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId();
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.SecAPI_Scan_Id__c.isUpdateable()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.SecAPI_Scan_Id__c = appReqId.split('/')[1];
                resp = appReqId;
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Error_Message__c.isAccessible()) {
                    throw new AuraHandledException('User does not have appropriate access to Error_Message__c field.');
                }
            }
                
            else{
                System.debug('0001');
               // if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Id.isUpdateable()) {
              // throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
           // }
                sr.Id = recordId;
                System.debug('0002');
                resp = 'Error occured during 1st Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Release_Copado__c.isUpdateable()) {
                throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
            }
                System.debug('0003');
                sr.Release_Copado__c = releaseId;
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Scan_Status__c.isAccessible()) {
                throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
            }
                System.debug('0004');
                sr.Scan_Status__c = 'Callout 1 Failed';
                 if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.RecordTypeId.isUpdateable()) {
                throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
            }
                System.debug('0005');
                sr.RecordTypeId = Schema.SObjectType.SEC_API_Scan_Result__c.getRecordTypeInfosByName().get('Release').getRecordTypeId();
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Error_Message__c.isUpdateable()) {
                    throw new AuraHandledException('User does not have appropriate access to Error_Message__c field.');
                }
                sr.Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                System.debug('0006');
                if (!Schema.sObjectType.copado__Release__c.fields.SEC_API_Scan_Status__c.isUpdateable() ||
                    !Schema.sObjectType.copado__Release__c.fields.SecApiScanProjectCounter__c.isUpdateable()) {
                        throw new AuraHandledException('User does not have appropriate access to update copado__Release__c fields.');
                    }
                
                System.debug('0007');
                //Change made by Muthu in updating SEC_API_Scan_Status__c='Failed ' When Scan_Statu__c = 'Callout 1 Failed'
                toUpdateRelease.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Failed',Current_Glapi_Status__c = 'Security Scan Failed'));  //Needs to verify1
                //resp = 'Error occured during 1st Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                System.debug('0008');
            }
            if(!toUpdateRelease.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('0009'+toUpdateRelease);
                if(Integer.valueof(lstRelease.CurrentScanCount__c) ==0){
                    System.debug('*******************************-update 4');
                    Map<Id,copado__Release__c> updateReleaseMap = new Map<Id,copado__Release__c>();
                    updateReleaseMap.putAll(toUpdateRelease);
                    update updateReleaseMap.values();
                }    
            }
            List<SEC_API_Scan_Result__c> lstSecScanResults =  new List<SEC_API_Scan_Result__c>{sr};
                if(!lstSecScanResults.isEmpty() && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable() && Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible()){
                    System.debug('*******************************-update 5');
                    System.debug('00010'+lstSecScanResults);
                     if(Integer.valueof(lstRelease.CurrentScanCount__c) ==0){
                         if (!lstSecScanResults.isEmpty() && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()) {
                         } else {
                             throw new AuraHandledException('User does not have permission to update SEC_API_Scan_Result__c records.');
                         }
                         update lstSecScanResults;
                     }
                }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 1st Callout. Exception Cause : ' +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
		 } 
        return resp;
    }
    
    //method added by niharika for SCA/OSA scan
    @AuraEnabled
    public static String SCAScan(String releaseId) {
        if (!Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Id.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Status_URL__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Release_Copado__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_scan_Status__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Scan_Id__c.isAccessible() ||
            !Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Error_Message__c.isAccessible()) {
                throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
            }
        
        if (!Schema.sObjectType.copado__Release__c.isAccessible() || 
            !Schema.sObjectType.copado__Release__c.fields.SCA_Scan_Status__c.isAccessible()) {
                throw new AuraHandledException('User does not have appropriate access to copado__Release__c fields.');
            }
        system.debug('Enters scan');
        string statusURLSCA ='';
        String appReqIdSCA ='';
        string resp ='';
        String repoBranch = '';
        String initiatingSource = '';
        String mandatoryCol = '';
        String guId = '';
        String excludeFiles = '';
        String excludeFolders = '';
        String projectAppId ='';
        boolean forceFlag = true;
        Integer scanCounter = 0;
        List<copado__Release__c> toUpdateRelease = new List<copado__Release__c>();
        List<copado__User_Story__c> lstUserStory = new List<copado__User_Story__c>();
         copado__Release__c lstRelease = new copado__Release__c();
        if (!Schema.sObjectType.SEC_API_Scan_Result__c.isCreateable() || !Schema.sObjectType.SEC_API_Scan_Result__c.fields.Status_URL__c.isCreateable()) {
            throw new AuraHandledException('User do not have appropriate access to create SEC_API_Scan_Result__c records.');
        }
        SEC_API_Scan_Result__c sr = new SEC_API_Scan_Result__c();
        List<string> listOfProjectIDs = new List<string>();
              
        try{
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
            // lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.App_Id__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
               lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            }
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.copado__Release__c.isAccessible()){
                lstRelease = [select Id,Name,Artifact_Id__c, SecApiScanProjectCounter__c,CurrentScanCount__c,Unique_Appservice_Id__c from copado__Release__c where Id =:releaseId limit 1];
            }
            
            String unqappid = lstRelease.Unique_Appservice_Id__c;
			List<String> lstunqappid = unqappid.split(',');
            //lstRelease[0].CurrentScanCount__c = 0;
			//system.debug(lstunqappid[Integer.valueof(lstRelease[0].CurrentScanCount__c)]);
			system.debug(lstunqappid.size());
            system.debug('Checking Release ID' + releaseId );
            
            // add all project to list
             for(copado__User_Story__c us : lstUserStory){
                listOfProjectIDs.add(us.Copado__Project__r.SNOW_APPSVCID__c);
            }
            system.debug('SecApiScanProjectCounter__c value:' + lstRelease.SecApiScanProjectCounter__c);
            system.debug('SecApiScanProjectCounter__c:' + lstRelease.SecApiScanProjectCounter__c.intValue());
            scanCounter  =  lstRelease.SecApiScanProjectCounter__c != null ?  lstRelease.SecApiScanProjectCounter__c.intValue() : 0;
            system.debug('@@@lstRelease[0].SecApiScanProjectCounter__c.intValue() : ' +scanCounter);
            // remove duplicates from list
            List<String> UniqueProjectIDs = new List<String>(new Set<String>(listOfProjectIDs));
            system.debug('@@@UniqueProjectIDs : ' + UniqueProjectIDs);            
            // get current index of project // Multiple APPSVCIDs
           /*
            string currentIterationProjectID; 
                if(UniqueProjectIDs.size() == 1){
                   //currentIterationProjectID = 'APPSVC047063';
                   currentIterationProjectID = UniqueProjectIDs[0];//APPSVC047063 
                }   
                else{
                   currentIterationProjectID = UniqueProjectIDs[scanCounter-1]; //APPSVC047063
                }
            */
            
            string currentIterationProjectID = lstunqappid[Integer.valueof(lstRelease.CurrentScanCount__c)];
            system.debug('@@@currentIterationProjectID E3'+currentIterationProjectID);
              Integer totalstartedcompleted;
            totalstartedcompleted = Integer.valueof(lstRelease.CurrentScanCount__c);
            system.debug('@@@ totalstartedcompleted'+totalstartedcompleted);
                //UniqueProjectIDs[scanCounter-2];
            system.debug('@@@currentIterationProjectID'+currentIterationProjectID);
            // get project info
            copado__Project__c projectForSecApiCall;
            if(Schema.sObjectType.copado__Project__c.isAccessible()){
                projectForSecApiCall = [select App_Id__c, Exclude_Files__c, Exclude_Folders__c from copado__Project__c where SNOW_APPSVCID__c =:currentIterationProjectID limit 1];
                // populate info for project 
                projectAppId =projectForSecApiCall.App_Id__c;
                system.debug('Project app id for sca : '+projectForSecApiCall.App_Id__c);
                excludeFiles = projectForSecApiCall.Exclude_Files__c;
                excludeFolders = projectForSecApiCall.Exclude_Folders__c;  
            }
            if(Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible()){
                // get repo branch
                repoBranch = [Select Id,Repo_Branch__c From SEC_API_Scan_Result__c Where Release_Copado__c =: releaseId Order by CreatedDate Desc Limit 1].Repo_Branch__c;
            }
            //get data
            initiatingSource = [Select Id,Value__c From Glapi_Callout_Settings__c Where Name = 'SecAPIInitiatingSource' Limit 1].Value__c;
            mandatoryCol = [Select Id,Value__c From Glapi_Callout_Settings__c Where Name = 'SecAPIMandatoryCol' Limit 1].Value__c;
            guID =   [Select Id,Value__c From Glapi_Callout_Settings__c Where Name = 'TechGUID' Limit 1].Value__c;
            system.debug('repoBranch val = '+repoBranch);
            
              totalstartedcompleted = Integer.valueof(lstRelease.CurrentScanCount__c);
            
            if(totalstartedcompleted > 0){
                forceFlag = false;
            }
            
            String SCAreqBody = '{"repoBranchToScan": "refs/heads/'+repoBranch+'","incremental": true,"force":'+forceFlag+',"devOpsInfo": { "intiatingSource": "'+initiatingSource+'", "teamProjectName": "'+mandatoryCol+'", "teamProjectId": "'+guID+'", "buildInfo": { "buildId": "'+lstRelease.Artifact_Id__c+'", "buildName": "'+mandatoryCol+'", "buildDefinitionName": "'+mandatoryCol+'", "buildReason": "'+mandatoryCol+'", "buildRepositoryID": "'+mandatoryCol+'", "buildRepositoryName": "'+mandatoryCol+'", "buildSourceBranch": "refs/heads/'+repoBranch+'" }},"excludeFoldersPattern": "'+excludeFolders+'","excludeFilesPattern": "'+excludeFiles+'"}';
            HTTPResponse SCAres = new HTTPResponse();
            String SCAendURL = '/start/'+projectAppId;
            String recordId = [Select Id From SEC_API_Scan_Result__c Where Release_Copado__c =:ReleaseId Order by CreatedDate Desc limit 1].Id;
            system.debug('scaendUrl + tejaswi' + SCAendURL);
            
            
            system.debug('scareqbody + tejaswi' + SCAreqBody);
          
            SCAres = getSCACalloutResponse(SCAendURL,'POST',SCAreqBody,ReleaseId);
            system.debug('response Tejaswi body...' + SCAres.getBody());
           
            if(SCAres != null && SCAres.getStatusCode() == 202){
               
                // Parse JSON response to get the statusUrl field values.
                JSONParser SCAparser = JSON.createParser(SCAres.getBody());
                while (SCAparser.nextToken() != null) {
                    if ((SCAparser.getCurrentToken() == JSONToken.FIELD_NAME) && 
   //                     (SCAparser.getText() == 'statusUrlSCA')) {
                          (SCAparser.getText() == 'statusUrl')) {
                            SCAparser.nextToken();
                            // Get the value.
                            statusURLSCA = SCAparser.getText();
                        }
                }
                system.debug('Rama Status SCA URL value :' + statusURLSCA);
                if(!String.isEmpty(statusURLSCA)){
                    appReqIdSCA = statusURLSCA.substringAfter('status/');
                    system.debug('RAMA SCA APP Req ID :' + appReqIdSCA);
                    /*//TYD9504 Changes start
                    if(appReqIdSCA.length() > 0 && appReqIdSCA.contains('/')){
                      toUpdateRelease.add(new copado__Release__c(Id=releaseId,SCA_Scan_Passed__c=false,SCA_Scan_Status__c='In-Progress',SecApiScanProjectCounter__c = scanCounter +1,SCA_OSA_Scan_Id__c = appReqIdSCA.split('/')[1]));    
                    }
                }else{
                      toUpdateRelease.add(new copado__Release__c(Id=releaseId,SCA_Scan_Passed__c=false,SCA_Scan_Status__c='In-Progress',SecApiScanProjectCounter__c = scanCounter +1));
                }
                //TYD9504 Changes end */
                if(appReqIdSCA.length() > 0 && appReqIdSCA.contains('/')){
                      toUpdateRelease.add(new copado__Release__c(Id=releaseId,SCA_Scan_Passed__c=false,SCA_Scan_Status__c='In-Progress',SCA_Scan_Id__c = appReqIdSCA.split('/')[1],CurrentScanCount__c =  totalstartedcompleted+1));    
                    }
                }else{
                      toUpdateRelease.add(new copado__Release__c(Id=releaseId,SCA_Scan_Passed__c=false,SCA_Scan_Status__c='In-Progress',CurrentScanCount__c =  totalstartedcompleted+1));
                }
                system.debug('@@@ appReqIdforSCA'+appReqIdSCA);
                //if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.Id.isUpdateable()) {
                //        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                //    }
                sr.Id = recordId;
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Status_URL__c.isUpdateable()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.SCA_Status_URL__c = appReqIdSCA;
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_scan_Status__c.isAccessible()) {
                        throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
                    }
                sr.SCA_scan_Status__c = 'Callout 1 Completed';
                //sr.SecAPI_Scan_Id__c = appReqIdSCA.split('/')[1];
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Scan_Id__c.isUpdateable()) {
                throw new AuraHandledException('User does not have appropriate access to SEC_API_Scan_Result__c fields.');
            }
                sr.SCA_Scan_Id__c = appReqIdSCA.split('/')[1];
                //sr.SCA_Scan_Id__c = appReqIdSCA.split('/')[1];
                resp = appReqIdSCA;
                
            }
            // Chages made by Muthu - Feb 26/2025
            else {
                 if (Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Error_Message__c.isUpdateable() &
                    Schema.sObjectType.copado__Release__c.fields.SCA_Scan_Status__c.isUpdateable() &
                    Schema.sObjectType.copado__Release__c.fields.SecApiScanProjectCounter__c.isUpdateable()) {
                   
                sr.Id = recordId;
                sr.SCA_scan_Status__c = 'Callout 1 Failed';
                if (!Schema.sObjectType.SEC_API_Scan_Result__c.fields.SCA_Error_Message__c.isUpdateable()) {
                    throw new AuraHandledException('User does not have appropriate access to SCA_Error_Message__c field.');
                }
                
                sr.SCA_Error_Message__c = 'Status Code '+SCAres.getStatusCode() +', Error Message '+SCAres.getBody();
                if (!Schema.sObjectType.copado__Release__c.fields.SCA_Scan_Status__c.isUpdateable() ||
                    !Schema.sObjectType.copado__Release__c.fields.SecApiScanProjectCounter__c.isUpdateable()) {
                        throw new AuraHandledException('User does not have appropriate access to update copado__Release__c fields.');
                    }
                //Change made by Muthu in updating SCA_Scan_Status__c='Failed ' When SCA_scan_Status__c = 'Callout 1 Failed'
                toUpdateRelease.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c = 'Security Scan Failed'));  
               // resp = 'Error occured during 1st Callout. Response Status Code : ' +SCAres.getStatusCode()+ ', Response Status : ' + SCAres.getStatus()+', Response Message : ' + SCAres.getBody();
            
            
           
            }
                
            }
             List<SEC_API_Scan_Result__c> lstSecScanResults =  new List<SEC_API_Scan_Result__c>{sr};
                if(!lstSecScanResults.isEmpty() && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable() && Schema.sObjectType.SEC_API_Scan_Result__c.isAccessible()){
                    if(Integer.valueof(lstRelease.CurrentScanCount__c) ==0){   //Changes updated by Muthu
                        Update lstSecScanResults;
                    }
                }
             if(!toUpdateRelease.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('*******************************-update 8');
                    Map<Id,copado__Release__c> updateReleaseMap = new Map<Id,copado__Release__c>();
                    updateReleaseMap.putAll(toUpdateRelease);
                 if(Integer.valueof(lstRelease.CurrentScanCount__c) ==0){  //Changes updated by Muthu
                update updateReleaseMap.values();
                 }
            }   
            }            
        catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 1st Callout. Exception Cause : ' +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
        } 
        return resp;
    }
    
    @AuraEnabled
    public Static scanStatusWrapper runSecAPIStatusCheck(String statusURL,String releaseId) {
        scanStatusWrapper resposeRes = new scanStatusWrapper();
        scanStatusWrapper resposeResSCA = new scanStatusWrapper();
        //String currentStatus = '';
        String jsonReport = '';
        String pdfReport = '';
        String xmlReport = '';
        String scoreCard = '';
        String message = '';
        String submitedDateTime = '';
         Integer scanCounter = 0;
        SEC_API_Scan_Result__c sr = new SEC_API_Scan_Result__c();
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        copado__Release__c releaseDetails = [SELECT Id, SecApiScanProjectCounter__c,CurrentScanCount__c,Current_SAST_Run_Status__c,Current_SCA_Run_Status__c FROM copado__Release__c Where id =: releaseId limit 1];
        scanCounter = releaseDetails.SecApiScanProjectCounter__c != null ? releaseDetails.SecApiScanProjectCounter__c.intValue() : 0;
        List<string> listOfProjectIDs = new List<string>();
        HTTPResponse res = new HTTPResponse();
        for(copado__User_Story__c us : [SELECT Id,Copado__Project__c,Copado__Project__r.SNOW_APPSVCID__c , Copado__Project__r.App_Id__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null]){
            listOfProjectIDs.add(us.Copado__Project__r.SNOW_APPSVCID__c);
        }
          List<String> UniqueProjectIDs = new List<String>(new Set<String>(listOfProjectIDs));
        system.debug('UniqueProjectIDs : '+ UniqueProjectIDs);
        system.debug('Rama Status URL ' + statusURL);
        String endUrl =  '/status/'+statusURL;
        try{
            List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(releaseId);
            res =  getCalloutResponse(endURL,'GET',null);
            system.debug('Poorna res ' + res.getBody());
            system.debug('Poorna res status code ' + res.getStatusCode());
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in checksec api : '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'status')) {
                            parser.nextToken();
                            resposeRes.currentStatus = parser.getText();
                        }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'jsonReport')) {
                                 parser.nextToken();
                                 jsonReport = parser.getText();
                             } 
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'pdfReport')) {
                                 parser.nextToken();
                                 pdfReport = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'xmlReport')) {
                                 parser.nextToken();
                                 xmlReport = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'scoreCard')) {
                                 parser.nextToken();
                                 scoreCard = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'submitedDateTime')) {
                                 parser.nextToken();
                                 submitedDateTime = parser.getText();
                             } 
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'message')) {
                                 parser.nextToken();
                                 message = parser.getText();
                             }
                }
                
                if(!secResList.isEmpty()){
                    secResList[0].Json_Report__c  = jsonReport;
                    secResList[0].Pdf_Report__c  = pdfReport;
                    secResList[0].Xml_Report__c  = xmlReport;
                    secResList[0].Score_Card__c  = scoreCard;
                    if(submitedDateTime != null && String.isNotEmpty(submitedDateTime))
                        secResList[0].Submitted_Date__c  = convertStringtoDateTime(submitedDateTime);
                    secResList[0].Error_Message__c  = message;
                   //resposeRes.currentStatus = 'ERROR'; //// Kamal hardcoded value to test
                    if(resposeRes.currentStatus == 'FINISHED'){
                        system.debug('SCA scanCounter: '+scanCounter);
                        system.debug('SCA UniqueProjectIDs.size(): '+UniqueProjectIDs.size());
                        
                         Boolean scaRequired = getSCAvalue (releaseId , 2); // True
                         system.debug('****** scaRequired : '+scaRequired);
                         String multiapp; 
                         String SCAcurrentStat;
                        
                        if(Integer.valueof(releaseDetails.SecApiScanProjectCounter__c) > 1){
                           multiapp = 'TRUE'; 
                        }
                        Else{
                          multiapp = 'FALSE';
                        }
                         system.debug('****** multiapp : '+multiapp);
                        if(Test.isRunningTest()){
							//do something
							//scaRequired = true;
                           // multiapp ='TRUE';
                           // SCAcurrentStat = 'FINISHED';
						}
                        
                        if(scaRequired == true){
                         String StatURL = fetchSCAScanStatus (releaseId);
                         system.debug('****** StatURL : '+StatURL);    
                         SCAcurrentStat = PreviousrunStatusCheck (StatURL,releaseId,'SCA');
                         system.debug('****** SCAcurrentStat : '+SCAcurrentStat);     
                        }
                        else{
                           SCAcurrentStat='';
                        }
                        // SCAcurrentStat ='FINISHED'; // Kamal hardcoded value to test
                    /*    if(Test.isRunningTest()){
							//do something
							scaRequired = true;
                            multiapp ='TRUE';
                            SCAcurrentStat = 'FINISHED';
						}
                       */ 
                        //if(scanCounter != UniqueProjectIDs.size() && CurrRunstatus == releaseDetails.Current_SAST_Run_Status__c){
                        if(scaRequired == true && multiapp =='TRUE' && SCAcurrentStat == 'FINISHED'){    
                             resposeRes.currentStatus = 'FINISHED'; //1/16/2025                            
                             resposeRes.statusURL =  secAPIScan(releaseID);
                             resposeResSCA.statusURL =  SCAScan(releaseID);
                            system.debug(' SAS Status URL at partial finish : '+resposeRes.statusURL);
                            system.debug(' SAS Status URL at partial finish : '+resposeResSCA.statusURL);
                            if(resposeRes.statusURL.contains('error')){
                                resposeRes.currentStatus = '2nd Sec API call Error occured';
                            }
                           
                            if(resposeResSCA.statusURL.contains('error')){
                                resposeRes.currentStatus = '2nd Sec API call Error occured';
                            }
                           
                            
                        }
                        else if(scaRequired == false && multiapp =='TRUE'){
                             resposeRes.currentStatus = 'FINISHED'; //1/16/2025                              
                             resposeRes.statusURL =  secAPIScan(releaseID);
                            system.debug(' SAST Status URL at partial finish : '+resposeRes.statusURL);
                            if(resposeRes.statusURL.contains('error')){
                                resposeRes.currentStatus = '2nd Sec API call Error occured';
                            }                            
                        } 
                        else if(multiapp =='FALSE' && scaRequired == false){
                            system.debug('1/21/2025 went in SCA false');
                            string securityGrade = getSECAPISecurityScoreCard(UniqueProjectIDs[0], releaseId);
                            if(securityGrade.toLowerCase().contains('error')){
                                resposeRes.currentStatus = 'ERROR';
                                secResList[0].Scan_Status__c = 'Callout 2.5 Failed';
                                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                            }
                            else{
                                secResList[0].Scan_Status__c = 'Callout 2 Completed';
                            }
                            
                        }
                        else if (multiapp =='FALSE' && scaRequired == true){
                            system.debug('Score card status hit');
                            string securityGrade = getSCASecurityScoreCard(UniqueProjectIDs[0], releaseId);//thisline error
                            if(securityGrade.toLowerCase().contains('error')){
                                resposeRes.currentStatus = 'ERROR';
                                secResList[0].SCA_scan_Status__c = 'Callout 2.5 Failed';
                                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                            }
                            else{
                                secResList[0].SCA_scan_Status__c = 'Callout 2 Completed';
                                secResList[0].Scan_Status__c = 'Callout 2 Completed';//1/16/2025   
                            }  
                        }
                    }
                    else if(resposeRes.currentStatus == 'ERROR' || resposeRes.currentStatus == 'CANCELED' || resposeRes.currentStatus == 'FAILED'){
                        secResList[0].Scan_Status__c = 'Callout 2 Failed';
                        secResList[0].Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                        toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                        resposeRes.currentStatus = 'Error occured during 2nd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                    }
                    
                }
            }
            else{
                secResList[0].Scan_Status__c = 'Callout 2 Failed';
                secResList[0].Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                resposeRes.currentStatus = 'Error occured during 2nd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            }
            
            if(Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                System.debug('*******************************-update 9');
                system.debug('Scan Counter :'+scanCounter);
                
                    update secResList;
                
                
            }
            if(!toUpdateReleases.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('*******************************-update 10');
                system.debug('Scan Counter :'+scanCounter);
                
                    update toUpdateReleases;
                
            }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 2nd Callout - runSecAPIStatusCheck. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
            
        }
        return resposeRes;
    }
    
    @AuraEnabled
    public Static scanStatusWrapper runSCAStatusCheck(String statusURLSCA ,String releaseId) {
        scanStatusWrapper resposeRes = new scanStatusWrapper();
        scanStatusWrapper resposeResSCA = new scanStatusWrapper();
        //String currentStatus = '';
        String jsonReport = '';
        String appReqIdSCA = '';
        String pdfReport = '';
        String xmlReport = '';
        String scoreCard = '';
        String message = '';
        String submitedDateTime = '';
        Integer scanCounter = 0;
        //statusURLSCA = appReqIdSCA;
        SEC_API_Scan_Result__c sr = new SEC_API_Scan_Result__c();
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        copado__Release__c releaseDetails = [SELECT Id,SecApiScanProjectCounter__c,CurrentScanCount__c,Current_SAST_Run_Status__c,Current_SCA_Run_Status__c  FROM copado__Release__c Where id =: releaseId limit 1];
        scanCounter = releaseDetails.CurrentScanCount__c != null ? releaseDetails.CurrentScanCount__c.intValue() : 0;
        List<string> listOfProjectIDs = new List<string>();
        HTTPResponse res = new HTTPResponse();
        for(copado__User_Story__c us : [SELECT Id,Copado__Project__c,Copado__Project__r.SNOW_APPSVCID__c , Copado__Project__r.App_Id__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null]){
            listOfProjectIDs.add(us.Copado__Project__r.SNOW_APPSVCID__c);
        }
          List<String> UniqueProjectIDs = new List<String>(new Set<String>(listOfProjectIDs));
        system.debug('UniqueProjectIDs : '+ UniqueProjectIDs);
        system.debug('Rama SCA STatus URL : '+ statusURLSCA); //We get NULL - Needs to be fixed
        String endUrl =  '/status/'+statusURLSCA;
        system.debug('EndURL : '+endUrl);
        try{
            
            List<SEC_API_Scan_Result__c> secResList = getScanResultRecord(releaseId);
            system.debug('secResList : '+secResList);
            system.debug('endURL : '+endURL);
            system.debug('ReleaseId : '+ReleaseId);
            res =  getSCACalloutResponse(endURL,'GET',null,ReleaseId);
            system.debug('res : '+res);
            system.debug('res.getStatusCode() : '+res.getStatusCode());
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('11/13 res in SCA api : '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'status')) {
                            parser.nextToken();
                            resposeRes.currentStatus = parser.getText();
                            system.debug('Rama SCA current status value :' + resposeRes.currentStatus);
                        }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'jsonReport')) {
                                 parser.nextToken();
                                 jsonReport = parser.getText();
                             } 
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'pdfReport')) {
                                 parser.nextToken();
                                 pdfReport = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'xmlReport')) {
                                 parser.nextToken();
                                 xmlReport = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'scoreCard')) {
                                 parser.nextToken();
                                 scoreCard = parser.getText();
                             }
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'submitedDateTime')) {
                                 parser.nextToken();
                                 submitedDateTime = parser.getText();
                             } 
                    else if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                             (parser.getText() == 'message')) {
                                 parser.nextToken();
                                 message = parser.getText();
                             }
                }
                system.debug('Parsing completed for SCA ...');
                system.debug('SCA Response list : '+ secResList);
                if(!secResList.isEmpty()){
                    secResList[0].Json_Report__c  = jsonReport;
                    secResList[0].SCA_Pdf_Report__c  = pdfReport;
                    secResList[0].Xml_Report__c  = xmlReport;
                    secResList[0].Score_Card__c  = scoreCard;
                    if(submitedDateTime != null && String.isNotEmpty(submitedDateTime))
                        secResList[0].SCA_Submitted_Date__c = convertStringtoDateTime(submitedDateTime);
                        secResList[0].SCA_Error_Message__c  = message;
                    system.debug(' Current status Finished ? '+ resposeRes.currentStatus);
                    //resposeRes.currentStatus = 'FINISHED';
                    if(resposeRes.currentStatus == 'FINISHED'){
                        system.debug('SCA scanCounter: '+scanCounter);
                        system.debug('SCA UniqueProjectIDs.size(): '+UniqueProjectIDs.size());
                        
                         Boolean scaRequired = getSCAvalue (releaseId , 2); 
                         
                         //String multiapp = multiRunScancheck(releaseId ,'SCA');
                         String multiapp; 
                        
                        if(Integer.valueof(releaseDetails.CurrentScanCount__c) < Integer.valueof(releaseDetails.SecApiScanProjectCounter__c)){
                           multiapp = 'TRUE'; 
                        }
                        Else{
                          multiapp = 'FALSE';
                        }
                        
                        
                        
                         String StatURL = fetchScanStatus (releaseId); //1/14/2025
                             
                         String SASpreviousStat = PreviousrunStatusCheck (StatURL,releaseId,'SAS');
                        
                         system.debug('####################################'+scaRequired + multiapp + SASpreviousStat);
                        
                       if(Test.isRunningTest()){
                        //do something
                        multiapp = 'FALES';
                        }
                        //
                        
                        if(scaRequired == true && multiapp =='TRUE' && SASpreviousStat == 'FINISHED'){    
                             resposeRes.currentStatus = 'FINISHED';                             
                             resposeRes.statusURL =  secAPIScan(releaseID);
                             resposeResSCA.statusURL =  SCAScan(releaseID);
                            system.debug(' SAS Status URL at partial finish : '+resposeRes.statusURL);
                            //system.debug(' SAS Status URL at partial finish : '+resposeResSCA.statusURL);
                            if(resposeRes.statusURL.contains('error')){
                                resposeRes.currentStatus = '2nd Sec API call Error occured';
                            }
                            
                            if(resposeResSCA.statusURL.contains('error')){
                                resposeRes.currentStatus = '2nd Sec API call Error occured';
                            }
                            
                            
                        }
                        else if(scaRequired == false && multiapp =='TRUE' && SASpreviousStat == 'FINISHED' ){
                             resposeRes.currentStatus = 'FINISHED';                            
                             resposeRes.statusURL =  secAPIScan(releaseID);
                            system.debug(' SCA Status URL at partial finish : '+resposeRes.statusURL);
                            if(resposeRes.statusURL.contains('error')){
                                resposeRes.currentStatus = '2nd Sec API call Error occured';
                            }                            
                        }    
                        else if (multiapp =='FALSE'){
                            system.debug('Score card status hit');
                            string securityGrade = getSCASecurityScoreCard(UniqueProjectIDs[0], releaseId);
                            if(securityGrade.toLowerCase().contains('error')){
                                resposeRes.currentStatus = 'ERROR';
                                secResList[0].SCA_scan_Status__c = 'Callout 2.5 Failed';
                                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                            }
                            else{
                                secResList[0].SCA_scan_Status__c = 'Callout 2 Completed'; 
                                
                               
                                
                            }  
                        }
                    }
                    else if(resposeRes.currentStatus == 'ERROR' || resposeRes.currentStatus == 'CANCELED' || resposeRes.currentStatus == 'FAILED'){
                        secResList[0].SCA_scan_Status__c = 'Callout 2 Failed';
                        toUpdateReleases.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                    }
                    
                }else{
                secResList[0].SCA_scan_Status__c = 'Callout 2 Failed';
                secResList[0].SCA_Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                resposeRes.currentStatus = 'Error occured during 2nd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            }
           }
            else{
                secResList[0].SCA_scan_Status__c = 'Callout 2 Failed';
                secResList[0].SCA_Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                resposeRes.currentStatus = 'Error occured during 2nd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            }
            
            if(Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                System.debug('*******************************-update 11');
                system.debug('Scan Counter :'+scanCounter);
                
                    update secResList;
                
                
            }
            if(!toUpdateReleases.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('*******************************-update 12');
                System.debug('Scan Counter :'+scanCounter);
                
                    update toUpdateReleases;
                
                
            }
             
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during 2nd Callout. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : ' + e.getMessage());
            
        }
        
        system.debug('resposeRes : '+resposeRes);
        
        return resposeRes;
    }
    
    @AuraEnabled
    Public static String PreviousrunStatusCheck(String statusURL,String releaseId,String Scantype){
       String currentstatus;
       scanStatusWrapper resposeRes = new scanStatusWrapper();
       HTTPResponse res = new HTTPResponse();
       String endURL =  '/status/'+statusURL;
        if(Scantype == 'SAS'){
           res =  getCalloutResponse(endURL,'GET',null); 
        } Else{
          res =  getSCACalloutResponse(endURL,'GET',null,releaseId); 
        }
       
       if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in checksec api : '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'status')) {
                            parser.nextToken();
                            resposeRes.currentStatus = parser.getText();
                        }
                }    
       } 
       
       if(resposeRes.currentStatus == 'FINISHED'){
          currentstatus = resposeRes.currentStatus ;  
       }     
        
       //currentStatus = 'FINISHED'; 
       return currentstatus; 
    }
    
    @AuraEnabled
    public Static String getSECAPIScoreCard(String scoreCardURL, String releaseId) {
        Boolean failScan;
        String scanType ='';
        String resp = '';
        SECAPIParser scparser;
        SEC_API_Scan_Result__c sr;
        Boolean failureResult = false;
        String endUrl = '/score/'+scoreCardURL;
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        copado__Release__c releaseDetails = [SELECT Id, SecApiScanProjectCounter__c FROM copado__Release__c Where id =: releaseId limit 1];
        HTTPResponse res = new HTTPResponse();
        try{
            res =  getCalloutResponse(endURL,'GET',null);
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(releaseId);
            
            if(res.getStatusCode() == 200){
                
                
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in acorecRD api : '+ res.getBody());
                while (parser.nextToken() != null) {
                            system.debug('@@@@ parser' +  parser.getText());
                }
                
                
                scparser = (SECAPIParser)JSON.deserialize(res.getBody(), SECAPIParser.class);
                                
                if(!srList.isEmpty()){
                    system.debug('vxd3378 inside isempty: ');
                    sr = srList[0];
                    sr.FailScan__c = scparser.failScan;
                    sr.Critical__c = scparser.critical!=null?Decimal.valueOf(scparser.critical):0;
                    sr.High__c = scparser.high!=null?Decimal.valueOf(scparser.high):0;
                    sr.Medium__c = scparser.medium!=null?Decimal.valueOf(scparser.medium):0;
                    sr.Low__c = scparser.low!=null?Decimal.valueOf(scparser.low):0;
                    sr.Release_Copado__c = releaseId;
                    sr.Scan_Type__c = scparser.scanType;
                    sr.Req_Id__c = scparser.reqId;
                    sr.Scan_Status__c = 'Callout 3 Completed';
                    //vxd3378 changes start 02/05/2025 testing
                    //sr.FailScan__c = false;
                    //sr.Critical__c = 0;
                    //sr.High__c = 0;
                    //sr.Medium__c = 0;
                    //sr.Low__c = 0;
                    //VXD3378 02/05/2025 testing end

                    //toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Completed',Current_Glapi_Status__c='Security Scan Completed'));
                    if(scparser.lastUpdated != null && scparser.lastUpdated != '')
                        sr.Last_Updated__c = convertStringtoDateTime(scparser.lastUpdated);
                }
                //Changes updated by Muthu
                List<copado__User_Story__c> lstUserStory = new List<copado__User_Story__c>();         
            Map<string,String> mapOfProjectIDs = new map<string,String>();
            string finalscanresult ='';
            string projectscanresult =''; 
            
        
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
            	lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c,copado__Release__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            } 
           
            for(copado__User_Story__c us : lstUserStory){
                mapOfProjectIDs.put(us.Copado__Project__r.SNOW_APPSVCID__c,us.copado__Release__c);
            }
           
            
            for(String  proId :mapOfProjectIDs.keyset() ){
                  
                 projectscanresult = getFinalSECAPISecurityScoreCard(proId,mapOfProjectIDs.get(proId));    
                

                if(projectscanresult != 'A'){
                   failureResult = True; 
                }                                
            }
            
            
            if(!failureResult){
              toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Completed',SecAPI_Scan_Passed__c=true,SecurityGrade__c = 'A')); 
            }
            else{
             toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Completed',SecAPI_Scan_Passed__c=false,SecurityGrade__c = 'F'));
            }
            }
            
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.Scan_Status__c = 'Callout 3 Failed';
                    system.debug('vxd3378 Callout 3 Failed: ');
                    toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                    sr.Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured during 3rd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
            }
            
            
            //copado__Release__c cr = new copado__Release__c(Id=releaseId);
            
            
                       
           /* List<copado__User_Story__c> lstUserStory = new List<copado__User_Story__c>();    // Commentted by Muthu  
            Map<string,String> mapOfProjectIDs = new map<string,String>();
            string finalscanresult ='';
            string projectscanresult =''; 
            Boolean failureResult = false;
        
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
            // lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.App_Id__c,copado__Project__r.Exclude_Files__c,copado__Project__r.Exclude_Folders__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
               lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c,copado__Release__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            } 
           
            // add all project to list
             for(copado__User_Story__c us : lstUserStory){
                mapOfProjectIDs.put(us.Copado__Project__r.SNOW_APPSVCID__c,us.copado__Release__c);
            }
           
            
            for(String  proId :mapOfProjectIDs.keyset() ){
                  
                 projectscanresult = getFinalSECAPISecurityScoreCard(proId,mapOfProjectIDs.get(proId));    
                //VXD3378 02/05/2025 testing
                //projectscanresult  = 'F';
                //VXD3378 02/05/2025 testing END

                if(projectscanresult != 'A'){
                   failureResult = True; 
                }                                
            }
            
            
            if(!failureResult){
              /* cr.SecurityGrade__c = 'A';
               cr.SecAPI_Scan_Passed__c  = true;
              // cr.SCA_Scan_Passed__c  = true;
               cr.Current_Glapi_Status__c = 'Security Scan Completed';  
               toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Completed',SecAPI_Scan_Passed__c=true,SecurityGrade__c = 'A')); 
            }
            else{
             /*  cr.SecurityGrade__c = 'F'; 
               cr.SecAPI_Scan_Passed__c  = false;
              // cr.SCA_Scan_Passed__c  = false;//need to modify
               cr.Current_Glapi_Status__c = 'Security Scan Failed'; 
                toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Completed',SecAPI_Scan_Passed__c=false,SecurityGrade__c = 'F'));
            }*/ 
            
            
            
            /*
            //check the checkbox only if there are no High and medium security violations
            if(sr.High__c==0 && sr.Medium__c==0){
                cr.SecAPI_Scan_Passed__c  = true;
                cr.Current_Glapi_Status__c = 'Security Scan Completed';
            }
            else{
                cr.SecAPI_Scan_Passed__c  = false;
                cr.Current_Glapi_Status__c = 'Security Scan Failed';                
            }
            */
            // Start
           // cr.SecAPI_Scan_Passed__c  = true;
           // cr.Current_Glapi_Status__c = 'Security Scan Completed';
            // End
          //VXD3378 02/04/2025
          /*  toUpdateReleases.add(cr);
           */ 
            //vxd3378 end 02/04/2025
            
            if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                 if(!failureResult){
              		 sr.SecApiGrade__c = 'A';
           		 }
            	 else{
              		 sr.SecApiGrade__c = 'F'; 
           		 }
                System.debug('*******************************-update 14');
                 update sr;
            }
              //VXD3378 02/04/2025
          if(!toUpdateReleases.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('*******************************-update 15' + toUpdateReleases);
                update toUpdateReleases;
            }
            // Changes made by Muthu
            copado__Release__c glapiUpdate = [Select Id, Overall_Security_Scan_Status__c from copado__Release__c where Id = :releaseId LIMIT 1];
            if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                if(!failureResult){
                    glapiUpdate.Current_Glapi_Status__c = glapiUpdate.Overall_Security_Scan_Status__c;
                }else {
                    glapiUpdate.Current_Glapi_Status__c = 'Security Scan Failed';
                }
                update glapiUpdate;
        	}
            //vxd3378 end 02/04/2025
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            system.debug('vxd3378 Catch exception ');
            resp = 'Error occured during SAST Scorecard method. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            toUpdateReleases.add(new copado__Release__c(Id=releaseId,SEC_API_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
            throw new AuraHandledException('Error occured during 3rd Callout. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            
        }
        system.debug('vxd3378 return resp ');
        return resp;
    }
    //method added by niharika to getSCAScoreCard
    @AuraEnabled
    public Static String getSCAScoreCard(String scoreCardURL, String releaseId) {
        Boolean SCAfailScan;
        String scanType ='';
        String resp = '';
        SECAPIParser scparser;
        SEC_API_Scan_Result__c sr;
        Boolean failureResult = false;
        String endUrl = '/score/'+scoreCardURL;
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        copado__Release__c releaseDetails = [SELECT Id, SecApiScanProjectCounter__c FROM copado__Release__c Where id =: releaseId limit 1];
        HTTPResponse res = new HTTPResponse();
        try{
            res =  getSCACalloutResponse(endURL,'GET',null,ReleaseId);
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(releaseId);
            
            if(res.getStatusCode() == 200){
                
                
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in SCA scorecRD api : '+ res.getBody());
                while (parser.nextToken() != null) {
                            system.debug('@@@@ parser' +  parser.getText());
                }
                
                
                scparser = (SECAPIParser)JSON.deserialize(res.getBody(), SECAPIParser.class);
                                
                if(!srList.isEmpty()){
                    sr = srList[0];
                    system.debug('####################KAMAL- RESULT-'+scparser.failScan);
                    sr.SCA_Scan_Failed__c = Boolean.valueof(scparser.failScan);
                    sr.Critical_SCA__c = scparser.high!=null?Decimal.valueOf(scparser.high):0;
                    //sr.High_SCA_OSA__c = scparser.high!=null?Decimal.valueOf(scparser.high):0;
                    sr.High_SCA__c = scparser.high!=null?Decimal.valueOf(scparser.high):0;
                    sr.Medium_SCA__c = scparser.medium!=null?Decimal.valueOf(scparser.medium):0;
                    sr.Low_SCA__c = scparser.low!=null?Decimal.valueOf(scparser.low):0;
                    sr.SCA_scan_Status__c = 'Callout 3 Completed';
                    //vxd3378 changes start 02/05/2025 testing
                    //sr.Critical_SCA__c = 2;
                    //sr.SCA_Scan_Failed__c = true;
                    //vxd3378 changes end 
                    toUpdateReleases.add(new copado__Release__c(id=releaseId,SCA_Scan_Status__c='Completed',Current_Glapi_Status__c='Security Scan Completed'));
                    if(scparser.lastUpdated != null && scparser.lastUpdated != '')
                    	sr.SCA_Last_Updated__c = convertStringtoDateTime(scparser.lastUpdated);
                    /*
                    sr.SCA_OSA_Scan_Failed__c = Boolean.valueof(scparser.SCAfailScan);
                    sr.Critical_SCA__c = scparser.SCAhigh!=null?Decimal.valueOf(scparser.high):0;
                    sr.High_SCA_OSA__c = scparser.SCAhigh!=null?Decimal.valueOf(scparser.high):0;
                    sr.Medium_OSA_SCA__c = scparser.SCAmedium!=null?Decimal.valueOf(scparser.medium):0;
                    sr.Low_OSA_SCA__c = scparser.SCAlow!=null?Decimal.valueOf(scparser.low):0;
                    */
                    
                    }
            //Changes updated by Muthu
            copado__Release__c cr = new copado__Release__c(Id=releaseId); 
            List<copado__User_Story__c> lstUserStory = new List<copado__User_Story__c>();         
            Map<string,String> mapOfProjectIDs = new map<string,String>();
            string finalscanresult ='';
            string projectscanresult =''; 
            
        
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
                lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c,copado__Release__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            } 
           
            for(copado__User_Story__c us : lstUserStory){
                mapOfProjectIDs.put(us.Copado__Project__r.SNOW_APPSVCID__c,us.copado__Release__c);
            }
           
            
            for(String  proId :mapOfProjectIDs.keyset() ){
                projectscanresult = getFinalSECAPISecurityScoreCard(proId,mapOfProjectIDs.get(proId));    
                if(projectscanresult != 'A'){
                   failureResult = True; 
                }                                
            }
            
			if(sr.SCA_Scan_Failed__c == false){
               
               cr.SCA_Scan_Passed__c  = true;
               cr.SCA_Scan_Status__c='Completed';
            }
            else{
               cr.SCA_Scan_Passed__c  = false;
               cr.SCA_Scan_Status__c='Completed';
               }
            
            toUpdateReleases.add(cr);
            }
            
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.SCA_scan_Status__c = 'Callout 3 Failed';
                    toUpdateReleases.add(new copado__Release__c(id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
                    sr.SCA_Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured during 3rd Callout. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
            }
            
            
           /*copado__Release__c cr = new copado__Release__c(Id=releaseId); //Commented by Muthu
            
                       
            List<copado__User_Story__c> lstUserStory = new List<copado__User_Story__c>();         
            Map<string,String> mapOfProjectIDs = new map<string,String>();
            string finalscanresult ='';
            string projectscanresult =''; 
            Boolean failureResult = false;
        
            if(String.isNotEmpty(releaseId) && Schema.sObjectType.Copado__User_Story__c.isAccessible()){
                lstUserStory = [SELECT Id,Copado__Project__c, Copado__Project__r.SNOW_APPSVCID__c,copado__Release__c FROM Copado__User_Story__c Where copado__Release__c =: releaseId AND Copado__Project__r.App_Id__c != null];
            } 
           
            for(copado__User_Story__c us : lstUserStory){
                mapOfProjectIDs.put(us.Copado__Project__r.SNOW_APPSVCID__c,us.copado__Release__c);
            }
           
            
            for(String  proId :mapOfProjectIDs.keyset() ){
                  
                 projectscanresult = getFinalSECAPISecurityScoreCard(proId,mapOfProjectIDs.get(proId));    
                //vxd3378 changes start 02/05/2025 testing
                //projectscanresult = 'F';
                //vxd3378 changes start 02/05/2025 testinG
                if(projectscanresult != 'A'){
                   failureResult = True; 
                }                                
            }
            
            /*TYD9504 change
            if(!failureResult){
               
               cr.SCA_OSA_Scan_Passed__c  = true;
               }
            else{
               cr.SecAPI_Scan_Passed__c  = false;
                }
            
            toUpdateReleases.add(cr);*/
            //TYD9504 change end 
            
            /*if(sr.SCA_Scan_Failed__c == false){
               
               cr.SCA_Scan_Passed__c  = true;
               cr.SCA_Scan_Status__c='Completed';
               //cr.Current_Glapi_Status__c='Security Scan Completed';
               }
            else{
               cr.SCA_Scan_Passed__c  = false;
               cr.SCA_Scan_Status__c='Completed';
               //cr.Current_Glapi_Status__c='Security Scan Failed';
                }
            
            toUpdateReleases.add(cr);*/
            if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                System.debug('*******************************-update 16');
                update sr;
            }
           
            if(!toUpdateReleases.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                System.debug('*******************************-update 17');
                
                map<id,copado__Release__c> relmap = new map<id,copado__Release__c>();
                //put all the values from the list to map. 
                relmap.putall(toUpdateReleases);
                system.debug('exception testing '+relmap);
                if(relmap.size()>0){
                update relmap.values();
                }
                // Changes made by Muthu
                copado__Release__c glapiUpdate = [Select Id, Overall_Security_Scan_Status__c from copado__Release__c where Id = :releaseId LIMIT 1];
               if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                if(!failureResult){
                    glapiUpdate.Current_Glapi_Status__c = glapiUpdate.Overall_Security_Scan_Status__c;
                }else {
                    glapiUpdate.Current_Glapi_Status__c = 'Security Scan Failed';
                }
                update glapiUpdate;
        	}
                
                //update toUpdateReleases;
            }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            resp = 'Error occured during SCA Scorecard Method. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
            toUpdateReleases.clear();
            toUpdateReleases.add(new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Failed',Current_Glapi_Status__c='Security Scan Failed'));
            update toUpdateReleases;
            throw new AuraHandledException('Error occured during 3rd Callout. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            
        }
        
        return resp;
    }
    
    @AuraEnabled
    public Static String getSECAPISecurityScoreCard(String appServiceId, String releaseId) {

        
        String endUrl = '/scorecard/score/'+appServiceId;
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        SEC_API_Scan_Result__c sr;
        string score = '';
        system.debug('@@@@@ asd' + appServiceId + ' '+ releaseId);
        HTTPResponse res = new HTTPResponse();
        String resp = ''; 
        try{
            res =  getCalloutResponseV3(endURL,'GET',null);
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(releaseId);
            sr= srList[0];
            system.debug('@@@@@ asd 1/21' +res);
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in acorecRD api : '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'secApiGrade')) {
                            parser.nextToken();
                            score = parser.getText();
                            sr.Scan_Status__c = 'Callout 3 Completed';
                           
                        }
                    
                }
                
                if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                    System.debug('*******************************-update 18');
                    update new copado__Release__c(Id=releaseId,SecurityGrade__c=score);
                }
               if(Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                   System.debug('*******************************-update 19');
                    update new SEC_API_Scan_Result__c(Id=sr.Id,SecApiGrade__c=score); 
                }
                
                resp = score;
            }  
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.Scan_Status__c = 'Callout 2.5 Failed';
                    sr.Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured after 2nd Callout for Security Score Card. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
               
            }
             if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                System.debug('*******************************-update 20');  
                update sr;
              }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            // throw new AuraHandledException('Error occured after 2nd Callout for Security Score Card. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            resp = 'Status Code '+res.getStatusCode() +', Error Message '+e.getMessage();
        }
        return resp;
    }
    
    @AuraEnabled
    public Static String getSCASecurityScoreCard(String appServiceId, String releaseId) {

        
        String endUrl = '/scorecard/score/'+appServiceId;
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        SEC_API_Scan_Result__c sr;
        string score = '';
        system.debug('@@@@@ asd' + appServiceId + ' '+ releaseId);
        HTTPResponse res = new HTTPResponse();
        String resp = ''; 
        try{
           // res =  getSCACalloutResponse(endURL,'GET',null,ReleaseId);   
           res =  getCalloutResponseV3(endURL,'GET',null);           
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(releaseId);
            sr= srList[0];
            system.debug('@@@@@ asd' +res);
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in SCA scoreCARD api : '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'SCAapiGrade')) {
                            parser.nextToken();
                            score = parser.getText();
                            sr.SCA_scan_Status__c = 'Callout 3 Completed';
                           
                        }
                    
                }
                
                if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                    System.debug('*******************************-update 22');
                    update new copado__Release__c(Id=releaseId,SecurityGrade__c=score);
                }
                if(Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                    System.debug('*******************************-update 23');
                    update new SEC_API_Scan_Result__c(Id=sr.Id,SecApiGrade__c=score);
                }
                
                
                resp = score;
            }  
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.SCA_scan_Status__c = 'Callout 2.5 Failed';
                    sr.SCA_Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured after 2nd Callout for SCA Security Score Card. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
               
            }
             if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
                 System.debug('*******************************-update 24');
                update sr;
              }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            // throw new AuraHandledException('Error occured after 2nd Callout for Security Score Card. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            resp = 'Status Code '+res.getStatusCode() +', Error Message '+e.getMessage();
        }
        return resp;
    }
    
    @AuraEnabled
    public Static String getFinalSECAPISecurityScoreCard(String appServiceId, String releaseId) {

        
        String endUrl = '/scorecard/score/'+appServiceId;
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        SEC_API_Scan_Result__c sr;
        string score = '';
       
        HTTPResponse res = new HTTPResponse();
        String resp = ''; 
        try{
            res =  getCalloutResponseV3(endURL,'GET',null);
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(releaseId);
            sr= srList[0];
           
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in acorecRD api :33333-- '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'secApiGrade')) {
                            parser.nextToken();
                            score = parser.getText();
                            sr.Scan_Status__c = 'Callout 3 Completed';
                           
                        }
                    
                }
               
                if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                    //update new copado__Release__c(Id=releaseId,SecurityGrade__c=score);
                }
                
                resp = score;
                
            }  
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.Scan_Status__c = 'Callout 2.5 Failed';
                    sr.Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured after 2nd Callout for Security Score Card. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
               
            }
             if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
               // update sr;
              }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            // throw new AuraHandledException('Error occured after 2nd Callout for Security Score Card. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            resp = 'Status Code '+res.getStatusCode() +', Error Message '+e.getMessage();
        }
        return resp;
    }
    
     @AuraEnabled
    public Static String getFinalSCASecurityScoreCard(String appServiceId, String releaseId) {

        
        String endUrl = '/scorecard/score/'+appServiceId;
        List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
        SEC_API_Scan_Result__c sr;
        string score = '';
       
        HTTPResponse res = new HTTPResponse();
        String resp = ''; 
        try{
            res =  getSCACalloutResponse(endURL,'GET',null,ReleaseId);
            List<SEC_API_Scan_Result__c> srList = getScanResultRecord(releaseId);
            sr= srList[0];
           
            if(res != null && res.getStatusCode() == 200){
                JSONParser parser = JSON.createParser(res.getBody());
                system.debug('res in SCA ScoreCard api :33333-- '+ res.getBody());
                while (parser.nextToken() != null) {
                    if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) && 
                        (parser.getText() == 'SCAApiGrade')) {
                            parser.nextToken();
                            score = parser.getText();
                            sr.SCA_scan_Status__c = 'Callout 3 Completed';
                           
                        }
                    
                }
               
                if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                    //update new copado__Release__c(Id=releaseId,SecurityGrade__c=score);
                }
                
                resp = score;
                
            }  
            else{
                if(!srList.isEmpty()){
                    sr = srList[0];
                    sr.SCA_scan_Status__c = 'Callout 2.5 Failed';
                    sr.SCA_Error_Message__c = 'Status Code '+res.getStatusCode() +', Error Message '+res.getBody();
                    resp = 'Error occured after 2nd Callout for SCA Security Score Card. Response Status Code : ' +res.getStatusCode()+ ', Response Status : ' + res.getStatus()+', Response Message : ' + res.getBody();
                }
               
            }
             if(sr != null && Schema.sObjectType.SEC_API_Scan_Result__c.isUpdateable()){
               // update sr;
              }
            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            // throw new AuraHandledException('Error occured after 2nd Callout for Security Score Card. Exception Cause : ' + +e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
            resp = 'Status Code '+res.getStatusCode() +', Error Message '+e.getMessage();
        }
        return resp;
    }
    
    Private Static DateTime convertStringtoDateTime(String dat){
        Map<String,Integer> monthMap = new Map<String,Integer>{'January' => 1,  'February' => 2,  'March' => 3,  'April' => 4,  'May' => 5,  'June' => 6,  'July' => 7,  'August' => 8,  'September' => 9,  'October' => 10,  'November' => 11,  'December' => 12};
            DateTime dt1;       
        try{
            String[] myDateOnly = dat.split(',');
            String myDateStr = myDateOnly[1].replaceAll(' ',','); 
            String[] strDate = myDateStr.split(',');
            Integer myIntDate = integer.valueOf(strDate[1]);
            Integer myIntMonth = monthMap.get(strDate[2]);
            Integer myIntYear = integer.valueOf(strDate[3]);
            String mytime = strDate[4];
            String dt = myIntYear + '-' + myIntMonth + '-' + myIntDate + ' ' + myTime;
            
            dt1 = datetime.valueOfGmt(dt);
        }
        catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
        }
        return dt1;
    }
    public static HttpResponse getCalloutResponse(String endPointUrl, String requestType, String requestBody){
        HTTPResponse res = new HTTPResponse();
        HttpRequest req = new HttpRequest();
        try{
            if(requestType == 'GET'){
                req.setMethod('GET');
            }
            else if(requestType == 'POST'){
                req.setMethod('POST');
                req.setBody(requestBody);
            }
            req.setEndpoint('callout:SecAPI_SAST_Scan' + endPointUrl);
            system.debug('@@@ url'+ req.getEndpoint());
            req.setHeader('X-Api-Key', '{!$Credential.Password}'); //1c4b2765-369c-4fac-a6dc-abfe93dcdbaa
            req.setHeader('Content-Type','application/json');
            req.setHeader('userName', '{!$Credential.Username}');
            req.setHeader('EnterpriseSuite', Label.EnterpriseSuite);
            req.setHeader('EnterpriseValue', Label.EnterpriseValue);
            Http http = new Http();
            res = http.send(req);            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during HTTP callout. Exception Cause : ' + e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
        }
        return res;
    }
    
     public static HttpResponse getCalloutResponseV3(String endPointUrl, String requestType, String requestBody){
        HTTPResponse res = new HTTPResponse();
        HttpRequest req = new HttpRequest();
        system.debug('1/21 - Request type' + requestType);
        try{
            if(requestType == 'GET'){
                req.setMethod('GET');
            }
            else if(requestType == 'POST'){
                req.setMethod('POST');
                req.setBody(requestBody);
            }
            req.setEndpoint('callout:SecApiScanV3' + endPointUrl);
            system.debug('@@@ url 1/21/2025'+ req.getEndpoint());
            req.setHeader('x-api-Key', '{!$Credential.Password}'); //1c4b2765-369c-4fac-a6dc-abfe93dcdbaa
            req.setHeader('Content-Type','application/json');
            req.setHeader('userName', '{!$Credential.Username}');
            req.setHeader('EnterpriseSuite', Label.EnterpriseSuite);
            req.setHeader('EnterpriseValue', Label.EnterpriseValue);
            Http http = new Http();
            res = http.send(req);
            system.debug('1/21 - Response' + res);
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during HTTP callout. Exception Cause : ' + e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
        }
        return res;
    }
    
    //code added by niharika for callout for SCA/OSA
    public static HttpResponse getSCACalloutResponse(String endPointUrl, String requestType, String requestBody, String ReleaseId){
        HTTPResponse res = new HTTPResponse();
        HttpRequest req = new HttpRequest();
        copado__Release__c releaseRecord = [Select Id,SCA_Scan_Type__c From copado__Release__c Where ID =:ReleaseId Order by CreatedDate Desc limit 1];
        try{
            if(requestType == 'GET'){
                req.setMethod('GET');
            }
            else if(requestType == 'POST'){
                req.setMethod('POST');
                req.setBody(requestBody);
            }
            /*
            if(releaseRecord.SCA_Scan_Type__c == true){
                req.setEndpoint('callout:SecAPI_SCA_Scan' + endPointUrl);
            }else{
              req.setEndpoint('callout:SecAPI_OSA_Scan' + endPointUrl);  
            }
            */
            req.setEndpoint('callout:SecAPI_SCA_Scan' + endPointUrl);
            //req.setEndpoint('callout:SecAPI_OSA_Scan' + endPointUrl);
            system.debug('@@@ url'+ req.getEndpoint());
            req.setHeader('X-Api-Key', '{!$Credential.Password}'); //1c4b2765-369c-4fac-a6dc-abfe93dcdbaa
            req.setHeader('Content-Type','application/json');
            req.setHeader('userName', '{!$Credential.Username}');
            req.setHeader('EnterpriseSuite', Label.EnterpriseSuite);
            req.setHeader('EnterpriseValue', Label.EnterpriseValue);
            Http http = new Http();
            
            res = http.send(req);  
            system.debug('requestBody' + requestBody);
            system.debug('response tejaswi' + res);
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during HTTP callout. Exception Cause : ' + e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
        }
        return res;
    }
    
    //To identify SCA applicable for Humana Org
    /*@AuraEnabled
    public static String getSCAvalue(String releaseId){
        system.debug('Test-0001');//B2B
        if (!Schema.sObjectType.copado__Release__c.fields.isAccessible() ||
            !Schema.sObjectType.copado__Release__c.fields.Humana_Org__c.isAccessible()) {
                throw new AuraHandledException('User does not have permission to access certain fields.');
            }
        copado__Release__c releaseRecord = [SELECT Humana_Org__c FROM copado__Release__c WHERE Id =:releaseId WITH SECURITY_ENFORCED LIMIT 1];
        SCA_Identifier_for_ORG__mdt SCAdataRecords = [ SELECT OrgName__c,SCA_required__c FROM SCA_Identifier_for_ORG__mdt WHERE SCA_required__c = 'TRUE' AND OrgName__c =: releaseRecord.Humana_Org__c];
        system.debug('ORG name' + SCAdataRecords.OrgName__c);//B2B
        system.debug('SCA required value for ORG' + SCAdataRecords.SCA_required__c);//TRUE

        return String.valueof(SCAdataRecords.SCA_required__c);
        }*/
    
    @AuraEnabled
    public static String multiRunScancheck(String releaseId , String RunType) {
         
         String SAS_SCA_Completion = 'False';
         Integer runcount;
         String CurrRunstatus; 
         copado__Release__c releaseDetails = [SELECT Id, SecApiScanProjectCounter__c,Unique_Appservice_Id__c,CurrentScanCount__c,Current_SAST_Run_Status__c,Current_SCA_Run_Status__c FROM copado__Release__c Where id =: releaseId limit 1];
         //String scaRequired = getSCAvalue (releaseId); 
         String unqappid = releaseDetails.Unique_Appservice_Id__c;
		 List<String> lstunqappid = unqappid.split(',');
         
        if(Integer.valueof(releaseDetails.CurrentScanCount__c) < Integer.valueof(releaseDetails.SecApiScanProjectCounter__c) ){
              CurrRunstatus = lstunqappid[Integer.valueof(releaseDetails.CurrentScanCount__c)] +'-completed';
              runcount = Integer.valueof(releaseDetails.CurrentScanCount__c); 
		      system.debug(lstunqappid[Integer.valueof(releaseDetails.CurrentScanCount__c)]);
		      system.debug(lstunqappid.size()); 
        }
        
        if(Test.isRunningTest()){
        //do something
        CurrRunstatus = 'completed';
        releaseDetails.Current_SCA_Run_Status__c = 'completed';
        releaseDetails.Current_SAST_Run_Status__c = 'completed' ;   
            
        }
        
        if(RunType == 'SAS'){            
           if(CurrRunstatus == releaseDetails.Current_SCA_Run_Status__c ) { // 1001-Completed ==  Blank
              runcount =  Integer.valueof(releaseDetails.CurrentScanCount__c) +1;  
               if (runcount< Integer.valueof(releaseDetails.SecApiScanProjectCounter__c)){
                 SAS_SCA_Completion = 'True';   
               } 
               Else{
                SAS_SCA_Completion = 'False';   
               }
               
           }                       
          
           if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                //update toUpdateReleases;
                //listtoupdate(releaseId,runcount,CurrRunstatus);
           } 
        }
        else if (RunType == 'SCA'){
          if(CurrRunstatus == releaseDetails.Current_SAST_Run_Status__c ) {
              runcount =  Integer.valueof(releaseDetails.CurrentScanCount__c) +1;  
              if (runcount< Integer.valueof(releaseDetails.SecApiScanProjectCounter__c)){
                 SAS_SCA_Completion = 'True';   
              } 
              Else{
                SAS_SCA_Completion = 'False';   
              }
           }
                       
           //toUpdateReleases.add(new copado__Release__c(Id=releaseId,CurrentScanCount__c =runcount,Current_SCA_Run_Status__c=CurrRunstatus ));
           if(Schema.sObjectType.copado__Release__c.isUpdateable()){
                //update toUpdateReleases;
                //listtoupdate(releaseId,runcount,CurrRunstatus);
           }  
        }
        
        return SAS_SCA_Completion;
        
    }  
   
    @future
    public static void listtoupdate(String RelId ,Integer Runcnt,String curstat){
    List<copado__Release__c> toUpdateReleases = new List<copado__Release__c>();
    toUpdateReleases.add(new copado__Release__c(Id=Id.valueof(RelId),CurrentScanCount__c =Runcnt,Current_SAST_Run_Status__c=curstat ));
    update  toUpdateReleases;   
        
    }


    @AuraEnabled
    
    public static boolean getSCAvalue(String releaseId, Integer count) {
       /* if (!Schema.sObjectType.copado__Release__c.isAccessible() || 
            !Schema.sObjectType.copado__Release__c.fields.Humana_Org__c.isAccessible()) {
                throw new AuraHandledException('User does not have access to required fields or object.');
            }*/
        copado__Release__c releaseRecord = [SELECT Humana_Org__c FROM copado__Release__c WHERE Id = :releaseId  WITH SECURITY_ENFORCED LIMIT 1 ];
        
        if(Test.isRunningTest()){
			//do something
			releaseRecord.Humana_Org__c = 'B2B';
		}
        if (String.isBlank(releaseRecord.Humana_Org__c)) {
            throw new AuraHandledException('Humana_Org__c is blank for the given release.');
        }        
        copado__Release__c rl = new copado__Release__c();
        List <copado__Release__c> toUpdateReleases = NEW List<copado__Release__c>();
    /*   if (!Schema.sObjectType.SCA_Identifier_for_ORG__mdt.isAccessible() || 
            !Schema.sObjectType.SCA_Identifier_for_ORG__mdt.fields.OrgName__c.isAccessible() ||
           !Schema.sObjectType.SCA_Identifier_for_ORG__mdt.fields.SCA_required__c.isAccessible()) {
                throw new AuraHandledException('User does not have access to required fields or object.');
            }
      */ 
        SCA_Identifier_for_ORG__mdt mdtRecord = [SELECT OrgName__c, SCA_required__c FROM SCA_Identifier_for_ORG__mdt WHERE OrgName__c = :releaseRecord.Humana_Org__c WITH SECURITY_ENFORCED LIMIT 1];
        system.debug('value of sca - getscavalue method'+ mdtRecord.SCA_required__c);
        Boolean Sca_Required = Boolean.valueOf(mdtRecord.SCA_required__c);
        
        if(Test.isRunningTest()){
        //do something
        Sca_Required = false;
        count = 1;       
        }
        
        if (Sca_Required == false){
            if(count == 1){
            system.debug('VXD3378 false of sca method');
            rl = new copado__Release__c(Id=releaseId,SCA_Scan_Status__c='Not Applicable');
			toUpdateReleases.add(rl);
            if(!toUpdateReleases.isEmpty() && Schema.sObjectType.copado__Release__c.isUpdateable()){
                update toUpdateReleases;
            }}
        }
        return Sca_Required;
    }
    
    /* public static HttpResponse getSCACalloutResponseV3(String endPointUrl, String requestType, String requestBody, String ReleaseId){
        HTTPResponse res = new HTTPResponse();
        HttpRequest req = new HttpRequest();
         copado__Release__c releaseRecord = [Select Id,SCA_Scan_Type__c From copado__Release__c Where ID =:ReleaseId Order by CreatedDate Desc limit 1];
        try{
            if(requestType == 'GET'){
                req.setMethod('GET');
            }
            else if(requestType == 'POST'){
                req.setMethod('POST');
                req.setBody(requestBody);
            }
            req.setEndpoint('callout:SecApiScanV3' + endPointUrl);
            if(releaseRecord.SCA_Scan_Type__c == true){
                req.setEndpoint('callout:SecAPI_SCA_Scan' + endPointUrl);
            }else{
              req.setEndpoint('callout:SecAPI_OSA_Scan' + endPointUrl);  
            }
            system.debug('@@@ url'+ req.getEndpoint());
            req.setHeader('x-api-Key', '{!$Credential.Password}'); //1c4b2765-369c-4fac-a6dc-abfe93dcdbaa
            req.setHeader('Content-Type','application/json');
            req.setHeader('userName', '{!$Credential.Username}');
            req.setHeader('EnterpriseSuite', Label.EnterpriseSuite);
            req.setHeader('EnterpriseValue', Label.EnterpriseValue);
            Http http = new Http();
            system.debug('Request body for scorecard ...' + req);
            res = http.send(req);            
        }catch(Exception e){
            system.debug('exception '+e +e.getCause()+e.getLineNumber()+e.getMessage());
            throw new AuraHandledException('Error occured during HTTP callout. Exception Cause : ' + e.getCause()+ ' at Line No. ' + e.getLineNumber()+' Error Message : '+e.getMessage());
        }
        system.debug('Score card response : '+ res); 
        return res;
    }*/
    public class SECAPIParser{
        public String medium{get;set;}
        public String high{get;set;}
        public String low{get;set;}
        public String critical{get;set;}
        public String reqId{get;set;}
        public String scanType{get;set;}
        public String lastUpdated{get;set;}
        public Boolean failScan{get;set;}
        public String SCAmedium{get;set;}
        public String SCAhigh{get;set;}
        public String SCAlow{get;set;}
       // public String SCAcritical{get;set;}
        public Boolean SCAfailScan{get;set;}
    }
    
       
    public class scanStatusWrapper {
        @AuraEnabled public String currentStatus;
        @AuraEnabled public String statusURL;
    }
}
